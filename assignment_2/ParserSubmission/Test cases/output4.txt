SOURCE CODE:

@ project  (is : floating)
{
           return 10.0/(fahr -32.97)/9.9764;
}

%%
     boolean   found#nmd#;

	 found#nmd# := true;
	 if (found#nmd# = false)
     read(#xy#);
     while (low < high)  
         {  write  (low);
             write (convert [low]);
             low := low + step#xy;
         }
		 


OUTPUT:

Token: separator           Lexeme: @                   
	<RAT17F> -> <Opt Function Definitions> %% <Opt Declaration List> <Statement List>
	<Opt Function Definition> -> <Function Definition>
	<Function Definition> -> <Function> <Function Definition Prime>
	<Function> -> @ <Identifier> (<Opt Parameter List>) <Opt Declaration List> <Body>
Token: identifier          Lexeme: project             
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: is                  
	<Opt Parameter List> -> <Parameter List>
	<Parameter List> -> <Parameter> <Parameter List Prime>
	<Parameter> -> <IDs> : <Qualifier>
	<IDs> -> <identifier> <IDs Prime>
Token: operator            Lexeme: :                   
	<IDs Prime> -> Epsilon
Token: keyword             Lexeme: floating            
	<Qualifier> -> floating
Token: separator           Lexeme: )                   
	<Parameter List Prime> -> Epsilon
Token: separator           Lexeme: {                   
	<Opt Declaration List> -> Epsilon
	<Body> -> { <Statement List> }
Token: keyword             Lexeme: return              
	<Statement List> -> <Statement> <Statement List Prime>
	<Statement> -> <Return>
	<Return> -> return <Return Prime>
Token: floating            Lexeme: 10.0                
	<Return Prime> -> <Expression>;
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <floating>
Token: operator            Lexeme: /                   
	<Term Prime> -> / <Factor> <Term Prime>
Token: separator           Lexeme: (                   
	<Factor> -> <Primary>
	<Primary> -> (<Expression>)
Token: identifier          Lexeme: fahr                
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: operator            Lexeme: -                   
	<Primary Prime> -> Epsilon
	<Term Prime> -> Epsilon
	<Expression Prime> -> - <Term> <Expression Prime>
Token: floating            Lexeme: 32.97               
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <floating>
Token: separator           Lexeme: )                   
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: operator            Lexeme: /                   
	<Term Prime> -> / <Factor> <Term Prime>
Token: floating            Lexeme: 9.9764              
	<Factor> -> <Primary>
	<Primary> -> <floating>
Token: separator           Lexeme: ;                   
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: separator           Lexeme: }                   
	<Statement List Prime> -> Epsilon
Token: separator           Lexeme: %%                  
	<Function Definition Prime> -> Epsilon
Token: keyword             Lexeme: boolean             
	<Opt Declaration List> -> <Declaration List>
	<Declaration List> -> <Declaration> ; <Declaration List Prime>
	<Declaration> -> <Qualifier> <IDs>
	<Qualifier> -> boolean
Token: identifier          Lexeme: found#nmd#          
	<IDs> -> <identifier> <IDs Prime>
Token: separator           Lexeme: ;                   
	<IDs Prime> -> Epsilon
Token: identifier          Lexeme: found#nmd#          
	<Declaration List Prime> -> Epsilon
	<Statement List> -> <Statement> <Statement List Prime>
	<Statement> -> <Assign>
	<Assign> -> <Identifier> := <Expression>;
Token: operator            Lexeme: :=                  
Token: keyword             Lexeme: true                
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Prime> -> true
Token: separator           Lexeme: ;                   
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: keyword             Lexeme: if                  
	<Statement List Prime> -> <Statement List>
	<Statement List> -> <Statement> <Statement List Prime>
	<Statement> -> <If>
	<If> -> if (<Condition>) <Statement> <If Prime>
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: found#nmd#          
	<Condition> -> <Expression> <Relop> <Expression>
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: operator            Lexeme: =                   
	<Primary Prime> -> Epsilon
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
	<Relop> -> =
Token: keyword             Lexeme: false               
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Prime> -> false
Token: separator           Lexeme: )                   
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: keyword             Lexeme: read                
	<Statement> -> <Read>
	<Read> -> read (<IDs>);
Token: separator           Lexeme: (                   
Token: invalid identifier  Lexeme: #xy#                
Error at line 11
IDs syntax error
Invalid token, <identifier> is expected after '(' or ','.
