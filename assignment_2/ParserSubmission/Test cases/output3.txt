SOURCE CODE:

@ convert  (month : integer)
{
           return month / 12;
}
%%
     integer  month;
	 floating age, remainder;
	 read (month);
	 write(convert [month]);
     age := age + remainder;
	 
	 if(age < 1) 
		write(Baby);
	 else if (age < 3)
		write (Toddler);
	 else if (age < 5)
		write (Preschool);
	 else if (age < 12)
		write (GradeSchool);
	 else if (age < 18)
	    write (Teen);
	 else if (age < 21)
	    write (YoungAdult);
	 else if (age => 21)
	    write (Adult); 
	 fi
	 fi
	 fi
	 fi
	 fi
	 fi
	 fi


OUTPUT:

Token: separator           Lexeme: @                   
	<RAT17F> -> <Opt Function Definitions> %% <Opt Declaration List> <Statement List>
	<Opt Function Definition> -> <Function Definition>
	<Function Definition> -> <Function> <Function Definition Prime>
	<Function> -> @ <Identifier> (<Opt Parameter List>) <Opt Declaration List> <Body>
Token: identifier          Lexeme: convert             
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: month               
	<Opt Parameter List> -> <Parameter List>
	<Parameter List> -> <Parameter> <Parameter List Prime>
	<Parameter> -> <IDs> : <Qualifier>
	<IDs> -> <identifier> <IDs Prime>
Token: operator            Lexeme: :                   
	<IDs Prime> -> Epsilon
Token: keyword             Lexeme: integer             
	<Qualifier> -> integer
Token: separator           Lexeme: )                   
	<Parameter List Prime> -> Epsilon
Token: separator           Lexeme: {                   
	<Opt Declaration List> -> Epsilon
	<Body> -> { <Statement List> }
Token: keyword             Lexeme: return              
	<Statement List> -> <Statement> <Statement List Prime>
	<Statement> -> <Return>
	<Return> -> return <Return Prime>
Token: identifier          Lexeme: month               
	<Return Prime> -> <Expression>;
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: operator            Lexeme: /                   
	<Primary Prime> -> Epsilon
	<Term Prime> -> / <Factor> <Term Prime>
Token: integer             Lexeme: 12                  
	<Factor> -> <Primary>
	<Primary> -> <integer>
Token: separator           Lexeme: ;                   
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: separator           Lexeme: }                   
	<Statement List Prime> -> Epsilon
Token: separator           Lexeme: %%                  
	<Function Definition Prime> -> Epsilon
Token: keyword             Lexeme: integer             
	<Opt Declaration List> -> <Declaration List>
	<Declaration List> -> <Declaration> ; <Declaration List Prime>
	<Declaration> -> <Qualifier> <IDs>
	<Qualifier> -> integer
Token: identifier          Lexeme: month               
	<IDs> -> <identifier> <IDs Prime>
Token: separator           Lexeme: ;                   
	<IDs Prime> -> Epsilon
Token: keyword             Lexeme: floating            
	<Declaration List Prime> -> <Declaration List>
	<Declaration List> -> <Declaration> ; <Declaration List Prime>
	<Declaration> -> <Qualifier> <IDs>
	<Qualifier> -> floating
Token: identifier          Lexeme: age                 
	<IDs> -> <identifier> <IDs Prime>
Token: separator           Lexeme: ,                   
	<IDsPrime> -> , <IDs>
Token: identifier          Lexeme: remainder           
	<IDs> -> <identifier> <IDs Prime>
Token: separator           Lexeme: ;                   
	<IDs Prime> -> Epsilon
Token: keyword             Lexeme: read                
	<Declaration List Prime> -> Epsilon
	<Statement List> -> <Statement> <Statement List Prime>
	<Statement> -> <Read>
	<Read> -> read (<IDs>);
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: month               
	<IDs> -> <identifier> <IDs Prime>
Token: separator           Lexeme: )                   
	<IDs Prime> -> Epsilon
Token: separator           Lexeme: ;                   
Token: keyword             Lexeme: write               
	<Statement List Prime> -> <Statement List>
	<Statement List> -> <Statement> <Statement List Prime>
	<Statement> -> <Write>
	<Write> -> <write (<Expression>);
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: convert             
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: separator           Lexeme: [                   
	<Primary Prime> -> [<IDs>]
Token: identifier          Lexeme: month               
	<IDs> -> <identifier> <IDs Prime>
Token: separator           Lexeme: ]                   
	<IDs Prime> -> Epsilon
Token: separator           Lexeme: )                   
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: separator           Lexeme: ;                   
Token: identifier          Lexeme: age                 
	<Statement List Prime> -> <Statement List>
	<Statement List> -> <Statement> <Statement List Prime>
	<Statement> -> <Assign>
	<Assign> -> <Identifier> := <Expression>;
Token: operator            Lexeme: :=                  
Token: identifier          Lexeme: age                 
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: operator            Lexeme: +                   
	<Primary Prime> -> Epsilon
	<Term Prime> -> Epsilon
	<Expression Prime> -> + <Term> <Expression Prime>
Token: identifier          Lexeme: remainder           
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: separator           Lexeme: ;                   
	<Primary Prime> -> Epsilon
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: keyword             Lexeme: if                  
	<Statement List Prime> -> <Statement List>
	<Statement List> -> <Statement> <Statement List Prime>
	<Statement> -> <If>
	<If> -> if (<Condition>) <Statement> <If Prime>
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: age                 
	<Condition> -> <Expression> <Relop> <Expression>
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: operator            Lexeme: <                   
	<Primary Prime> -> Epsilon
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
	<Relop> -> <
Token: integer             Lexeme: 1                   
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <integer>
Token: separator           Lexeme: )                   
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: keyword             Lexeme: write               
	<Statement> -> <Write>
	<Write> -> <write (<Expression>);
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: Baby                
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: separator           Lexeme: )                   
	<Primary Prime> -> Epsilon
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: separator           Lexeme: ;                   
Token: keyword             Lexeme: else                
	<If Prime> -> else <Statement> fi
Token: keyword             Lexeme: if                  
	<Statement> -> <If>
	<If> -> if (<Condition>) <Statement> <If Prime>
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: age                 
	<Condition> -> <Expression> <Relop> <Expression>
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: operator            Lexeme: <                   
	<Primary Prime> -> Epsilon
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
	<Relop> -> <
Token: integer             Lexeme: 3                   
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <integer>
Token: separator           Lexeme: )                   
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: keyword             Lexeme: write               
	<Statement> -> <Write>
	<Write> -> <write (<Expression>);
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: Toddler             
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: separator           Lexeme: )                   
	<Primary Prime> -> Epsilon
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: separator           Lexeme: ;                   
Token: keyword             Lexeme: else                
	<If Prime> -> else <Statement> fi
Token: keyword             Lexeme: if                  
	<Statement> -> <If>
	<If> -> if (<Condition>) <Statement> <If Prime>
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: age                 
	<Condition> -> <Expression> <Relop> <Expression>
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: operator            Lexeme: <                   
	<Primary Prime> -> Epsilon
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
	<Relop> -> <
Token: integer             Lexeme: 5                   
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <integer>
Token: separator           Lexeme: )                   
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: keyword             Lexeme: write               
	<Statement> -> <Write>
	<Write> -> <write (<Expression>);
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: Preschool           
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: separator           Lexeme: )                   
	<Primary Prime> -> Epsilon
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: separator           Lexeme: ;                   
Token: keyword             Lexeme: else                
	<If Prime> -> else <Statement> fi
Token: keyword             Lexeme: if                  
	<Statement> -> <If>
	<If> -> if (<Condition>) <Statement> <If Prime>
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: age                 
	<Condition> -> <Expression> <Relop> <Expression>
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: operator            Lexeme: <                   
	<Primary Prime> -> Epsilon
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
	<Relop> -> <
Token: integer             Lexeme: 12                  
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <integer>
Token: separator           Lexeme: )                   
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: keyword             Lexeme: write               
	<Statement> -> <Write>
	<Write> -> <write (<Expression>);
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: GradeSchool         
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: separator           Lexeme: )                   
	<Primary Prime> -> Epsilon
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: separator           Lexeme: ;                   
Token: keyword             Lexeme: else                
	<If Prime> -> else <Statement> fi
Token: keyword             Lexeme: if                  
	<Statement> -> <If>
	<If> -> if (<Condition>) <Statement> <If Prime>
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: age                 
	<Condition> -> <Expression> <Relop> <Expression>
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: operator            Lexeme: <                   
	<Primary Prime> -> Epsilon
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
	<Relop> -> <
Token: integer             Lexeme: 18                  
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <integer>
Token: separator           Lexeme: )                   
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: keyword             Lexeme: write               
	<Statement> -> <Write>
	<Write> -> <write (<Expression>);
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: Teen                
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: separator           Lexeme: )                   
	<Primary Prime> -> Epsilon
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: separator           Lexeme: ;                   
Token: keyword             Lexeme: else                
	<If Prime> -> else <Statement> fi
Token: keyword             Lexeme: if                  
	<Statement> -> <If>
	<If> -> if (<Condition>) <Statement> <If Prime>
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: age                 
	<Condition> -> <Expression> <Relop> <Expression>
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: operator            Lexeme: <                   
	<Primary Prime> -> Epsilon
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
	<Relop> -> <
Token: integer             Lexeme: 21                  
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <integer>
Token: separator           Lexeme: )                   
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: keyword             Lexeme: write               
	<Statement> -> <Write>
	<Write> -> <write (<Expression>);
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: YoungAdult          
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: separator           Lexeme: )                   
	<Primary Prime> -> Epsilon
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: separator           Lexeme: ;                   
Token: keyword             Lexeme: else                
	<If Prime> -> else <Statement> fi
Token: keyword             Lexeme: if                  
	<Statement> -> <If>
	<If> -> if (<Condition>) <Statement> <If Prime>
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: age                 
	<Condition> -> <Expression> <Relop> <Expression>
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: operator            Lexeme: =>                  
	<Primary Prime> -> Epsilon
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
	<Relop> -> =>
Token: integer             Lexeme: 21                  
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <integer>
Token: separator           Lexeme: )                   
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: keyword             Lexeme: write               
	<Statement> -> <Write>
	<Write> -> <write (<Expression>);
Token: separator           Lexeme: (                   
Token: identifier          Lexeme: Adult               
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Primary>
	<Primary> -> <identifier> <Primary Prime>
Token: separator           Lexeme: )                   
	<Primary Prime> -> Epsilon
	<Term Prime> -> Epsilon
	<Expression Prime> -> Epsilon
Token: separator           Lexeme: ;                   
Token: keyword             Lexeme: fi                  
	<If Prime> -> fi
Token: keyword             Lexeme: fi                  
Token: keyword             Lexeme: fi                  
Token: keyword             Lexeme: fi                  
Token: keyword             Lexeme: fi                  
Token: keyword             Lexeme: fi                  
Token: keyword             Lexeme: fi                  
Token: EOF                 Lexeme: EOF                 

